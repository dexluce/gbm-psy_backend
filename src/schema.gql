# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Meeting {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  date: DateTime!
  virtualAddress: String
  physicalAddress: String
  jitsiMeetToken: String
  evenement: Evenement!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AppFile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  src: String!
  isPublic: Boolean
  evenement: Evenement!
}

type Evenement {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  subscriptionsToEvenement: [SubscriptionToEvenement!]!
  meetings: [Meeting!]!
  isActive: Boolean!
  isPublic: Boolean!
  files: [AppFile!]!
}

type SubscriptionToEvenement {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  evenement: Evenement!
  isInstructor: Boolean!
  isValid: Boolean!
  isCertified: Boolean!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  sex: Sex!
  firstname: String!
  lastname: String!
  email: String!
  phone: String!
  profession: String!
  profession_place: String!
  personnal_address: String!
  chargeable_address: String
  isActive: Boolean!
  role: Role!
  subscriptionsToEvenement: [SubscriptionToEvenement!]!
}

"""User sex"""
enum Sex {
  MONSIEUR
  MADAME
}

"""User role"""
enum Role {
  ADMIN
  FORMATOR
  PARTICIPANT
}

type PaginatedList {
  items: [PaginableRessource!]!
  total: Int!
}

union PaginableRessource = User | Evenement | Meeting

type Auth {
  """JWT Bearer token"""
  token: String!
  user: User!
}

type Query {
  me: User!
  users(orderBy: String = "", orderDirection: OrderDirection = ASC, filter: String = "", pageNumber: Int = 0, pageSize: Int = 5): PaginatedList!
  evenement(evenementId: String!): Evenement!
  evenements(orderBy: String = "", orderDirection: OrderDirection = ASC, filter: String = "", pageNumber: Int = 0, pageSize: Int = 5): PaginatedList!
  meeting(id: String!): Meeting!
  meetingsInEvenement(evenementId: String!): [Meeting!]!
}

enum OrderDirection {
  ASC
  DESC
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  createUserByAdmin(data: CreateUserInput!): User!
  updateUser(data: UpdateUserInput!): User!
  changePassword(data: ChangePasswordInput!): User!
  createEvenement(data: CreateEvenementInput!): Evenement!
  createMeeting(data: CreateMeetingInput!): Meeting!
  refreshVirtualRoom(meetingId: String!): Meeting!
  login(data: LoginInput!): Auth!
}

input CreateUserInput {
  email: String!
  password: String!
  firstname: String!
  lastname: String!
  sex: Sex!
  phone: String!
  profession: String!
  profession_place: String!
  personnal_address: String!
  chargeable_address: String!
  isActive: Boolean = false
  role: Role = PARTICIPANT
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input CreateEvenementInput {
  title: String!
  description: String = ""
  isActive: Boolean = false
  isPublic: Boolean = false
}

input CreateMeetingInput {
  evenementId: String!
  date: DateTime!
  physicalAddress: String = ""
}

input LoginInput {
  email: String!
  password: String!
}
